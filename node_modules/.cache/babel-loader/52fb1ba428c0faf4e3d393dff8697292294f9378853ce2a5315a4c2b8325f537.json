{"ast":null,"code":"// src/redux/blockchain/blockchainReducer.js\n\nconst initialState = {\n  loading: false,\n  account: null,\n  web3: null,\n  LootBoxNFT: null,\n  // Store the LootBoxNFT contract\n  errorMsg: \"\" // General error message for the connection\n};\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMsg: \"\" // Clear any previous connection errors\n      };\n    case \"CONNECT_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        web3: action.payload.web3,\n        errorMsg: \"\" // Clear error messages on success\n      };\n    case \"CONNECT_FAILED\":\n      return {\n        ...state,\n        loading: false,\n        account: null,\n        // Reset account if connection failed\n        web3: null,\n        // Clear web3 on failure\n        errorMsg: action.payload // Set the error message for connection failure\n      };\n    case \"SET_LOOTBOXNFT_CONTRACT\":\n      return {\n        ...state,\n        LootBoxNFT: action.payload // Store the LootBoxNFT contract\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n        errorMsg: \"\" // Clear general error on account update\n      };\n    default:\n      return state;\n  }\n};\nexport default blockchainReducer;","map":{"version":3,"names":["initialState","loading","account","web3","LootBoxNFT","errorMsg","blockchainReducer","state","action","type","payload"],"sources":["C:/Users/deanw/OneDrive/Desktop/GitHub/MikulPacks/src/redux/blockchain/blockchainReducer.js"],"sourcesContent":["// src/redux/blockchain/blockchainReducer.js\n\nconst initialState = {\n  loading: false,\n  account: null,\n  web3: null,\n  LootBoxNFT: null, // Store the LootBoxNFT contract\n  errorMsg: \"\", // General error message for the connection\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMsg: \"\", // Clear any previous connection errors\n      };\n\n    case \"CONNECT_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        web3: action.payload.web3,\n        errorMsg: \"\", // Clear error messages on success\n      };\n\n    case \"CONNECT_FAILED\":\n      return {\n        ...state,\n        loading: false,\n        account: null, // Reset account if connection failed\n        web3: null, // Clear web3 on failure\n        errorMsg: action.payload, // Set the error message for connection failure\n      };\n\n    case \"SET_LOOTBOXNFT_CONTRACT\":\n      return {\n        ...state,\n        LootBoxNFT: action.payload, // Store the LootBoxNFT contract\n      };\n\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n        errorMsg: \"\", // Clear general error on account update\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAAE;EAClBC,QAAQ,EAAE,EAAE,CAAE;AAChB,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EAC1D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGF,KAAK;QACRN,OAAO,EAAE,IAAI;QACbI,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;IAEH,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGE,KAAK;QACRN,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEM,MAAM,CAACE,OAAO,CAACR,OAAO;QAC/BC,IAAI,EAAEK,MAAM,CAACE,OAAO,CAACP,IAAI;QACzBE,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;IAEH,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGE,KAAK;QACRN,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,IAAI;QAAE;QACfC,IAAI,EAAE,IAAI;QAAE;QACZE,QAAQ,EAAEG,MAAM,CAACE,OAAO,CAAE;MAC5B,CAAC;IAEH,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGH,KAAK;QACRH,UAAU,EAAEI,MAAM,CAACE,OAAO,CAAE;MAC9B,CAAC;IAEH,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGH,KAAK;QACRL,OAAO,EAAEM,MAAM,CAACE,OAAO,CAACR,OAAO;QAC/BG,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;IAEH;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}