{"ast":null,"code":"// src/redux/blockchain/blockchainActions.js\nimport Web3 from \"web3\";\n\n// Action Types\nexport const CONNECT_REQUEST = \"CONNECT_REQUEST\";\nexport const CONNECT_SUCCESS = \"CONNECT_SUCCESS\";\nexport const CONNECT_FAILED = \"CONNECT_FAILED\";\n\n// Connect to the blockchain\nexport const connect = CONFIG => {\n  return async dispatch => {\n    dispatch({\n      type: CONNECT_REQUEST\n    });\n    if (!CONFIG) {\n      console.error(\"CONFIG data is missing.\");\n      dispatch({\n        type: CONNECT_FAILED,\n        payload: \"Configuration data is missing.\"\n      });\n      return;\n    }\n    if (window.ethereum) {\n      try {\n        const web3 = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n\n        // Check if connected to the correct network\n        if (networkId === CONFIG.NETWORK.ID.toString()) {\n          // Dispatch connection success\n          dispatch({\n            type: CONNECT_SUCCESS,\n            payload: {\n              account: accounts[0],\n              web3\n            }\n          });\n        } else {\n          console.error(\"Wrong network. Please switch to the correct network.\");\n          dispatch({\n            type: CONNECT_FAILED,\n            payload: `Please connect to the ${CONFIG.NETWORK.NAME} network.`\n          });\n        }\n      } catch (err) {\n        console.error(\"Failed to connect to the blockchain:\", err);\n        dispatch({\n          type: CONNECT_FAILED,\n          payload: \"Failed to connect to the blockchain.\"\n        });\n      }\n    } else {\n      console.error(\"MetaMask or other Web3 wallet not detected.\");\n      dispatch({\n        type: CONNECT_FAILED,\n        payload: \"PLEASE INSTALL A WEB3 WALLET LIKE RABBY\"\n      });\n    }\n  };\n};","map":{"version":3,"names":["Web3","CONNECT_REQUEST","CONNECT_SUCCESS","CONNECT_FAILED","connect","CONFIG","dispatch","type","console","error","payload","window","ethereum","web3","accounts","request","method","networkId","NETWORK","ID","toString","account","NAME","err"],"sources":["C:/Users/deanw/OneDrive/Desktop/GitHub/MikulPacks/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// src/redux/blockchain/blockchainActions.js\nimport Web3 from \"web3\";\n\n// Action Types\nexport const CONNECT_REQUEST = \"CONNECT_REQUEST\";\nexport const CONNECT_SUCCESS = \"CONNECT_SUCCESS\";\nexport const CONNECT_FAILED = \"CONNECT_FAILED\";\n\n// Connect to the blockchain\nexport const connect = (CONFIG) => {\n  return async (dispatch) => {\n    dispatch({ type: CONNECT_REQUEST });\n\n    if (!CONFIG) {\n      console.error(\"CONFIG data is missing.\");\n      dispatch({\n        type: CONNECT_FAILED,\n        payload: \"Configuration data is missing.\",\n      });\n      return;\n    }\n\n    if (window.ethereum) {\n      try {\n        const web3 = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n\n        // Check if connected to the correct network\n        if (networkId === CONFIG.NETWORK.ID.toString()) {\n          // Dispatch connection success\n          dispatch({\n            type: CONNECT_SUCCESS,\n            payload: {\n              account: accounts[0],\n              web3,\n            },\n          });\n        } else {\n          console.error(\"Wrong network. Please switch to the correct network.\");\n          dispatch({\n            type: CONNECT_FAILED,\n            payload: `Please connect to the ${CONFIG.NETWORK.NAME} network.`,\n          });\n        }\n      } catch (err) {\n        console.error(\"Failed to connect to the blockchain:\", err);\n        dispatch({\n          type: CONNECT_FAILED,\n          payload: \"Failed to connect to the blockchain.\",\n        });\n      }\n    } else {\n      console.error(\"MetaMask or other Web3 wallet not detected.\");\n      dispatch({\n        type: CONNECT_FAILED,\n        payload: \"PLEASE INSTALL A WEB3 WALLET LIKE RABBY\",\n      });\n    }\n  };\n};"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAgB;;AAE9C;AACA,OAAO,MAAMC,OAAO,GAAIC,MAAM,IAAK;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEN;IAAgB,CAAC,CAAC;IAEnC,IAAI,CAACI,MAAM,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxCH,QAAQ,CAAC;QACPC,IAAI,EAAEJ,cAAc;QACpBO,OAAO,EAAE;MACX,CAAC,CAAC;MACF;IACF;IAEA,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIb,IAAI,CAACW,MAAM,CAACC,QAAQ,CAAC;QACtC,MAAME,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;UAC7CC,MAAM,EAAE;QACV,CAAC,CAAC;QACF,MAAMC,SAAS,GAAG,MAAMN,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;UAC9CC,MAAM,EAAE;QACV,CAAC,CAAC;;QAEF;QACA,IAAIC,SAAS,KAAKZ,MAAM,CAACa,OAAO,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE;UAC9C;UACAd,QAAQ,CAAC;YACPC,IAAI,EAAEL,eAAe;YACrBQ,OAAO,EAAE;cACPW,OAAO,EAAEP,QAAQ,CAAC,CAAC,CAAC;cACpBD;YACF;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLL,OAAO,CAACC,KAAK,CAAC,sDAAsD,CAAC;UACrEH,QAAQ,CAAC;YACPC,IAAI,EAAEJ,cAAc;YACpBO,OAAO,EAAE,yBAAyBL,MAAM,CAACa,OAAO,CAACI,IAAI;UACvD,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZf,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEc,GAAG,CAAC;QAC1DjB,QAAQ,CAAC;UACPC,IAAI,EAAEJ,cAAc;UACpBO,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACLF,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC;MAC5DH,QAAQ,CAAC;QACPC,IAAI,EAAEJ,cAAc;QACpBO,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}